{"version":3,"sources":["Task.js","TaskList.js","AddTask.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","task","text","date","id","finish","important","endDate","Date","toLocaleString","active","key","className","onClick","change","delete","TaskList","tasks","filter","sort","a","b","toLowerCase","map","done","length","AddTask","minDate","toISOString","slice","state","value","handleInput","e","target","type","checked","setState","handleClick","alert","newTask","add","placeholder","this","onChange","htmlFor","min","max","Component","App","idCounter","handleChange","forEach","getTime","handleDelete","addTask","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f2555d8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Task = (props) => {\r\n    const { text, date, id, finish, important } = props.task;\r\n    const endDate = new Date(finish).toLocaleString();\r\n    if (props.task.active) {\r\n        return (\r\n            <>\r\n                <p key={props.id}>\r\n                    <strong className={important ? \"red\" : null}>{text}</strong> - wykonać do: {date} <button onClick={() => props.change(id)}>Zadanie wykonane</button>\r\n                    <button onClick={() => props.delete(id)}>X</button>\r\n                </p>\r\n            </>\r\n        );\r\n    } else {\r\n        return (\r\n            <p><strong><span className=\"crossOut\">{text} </span></strong><em>- data wykonania: {endDate}</em> <button onClick={() => props.delete(id)}>X</button></p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from './Task.js'\r\n\r\nconst TaskList = (props) => {\r\n    let active = props.tasks.filter(task => task.active);\r\n\r\n    const comp = (a, b) => {\r\n        a = a.text.toLowerCase();\r\n        b = b.text.toLowerCase();\r\n        if (a > b) return 1\r\n        if (a < b) return -1\r\n        else return 0\r\n    }\r\n    active.sort(comp);\r\n\r\n    active = active.map(task => (\r\n        <Task key={task.id} task={task} change={props.change} delete={props.delete} />\r\n    ));\r\n    let done = props.tasks.filter(task => !task.active);\r\n    done = done.map(task => (\r\n        <Task key={task.id} task={task} change={props.change} delete={props.delete} />\r\n    ));\r\n\r\n\r\n    return (\r\n        <>\r\n            <hr />\r\n            <h2>Lista zadań</h2>\r\n            {active.length > 0 && <p><em>Sortowanie w kolejności alfabetycznej</em></p>}\r\n            {active}\r\n            <hr />\r\n            <h2>Zrobione ({done.length})</h2>\r\n            {done}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TaskList;","import React, { Component } from 'react';\r\nclass AddTask extends Component {\r\n    minDate = new Date().toISOString().slice(0, 10);\r\n    state = {\r\n        value: '',\r\n        date: this.minDate,\r\n        important: false\r\n    }\r\n\r\n    handleInput = (e) => {\r\n        if (e.target.type === \"checkbox\") {\r\n            const important = e.target.checked;\r\n            this.setState({\r\n                important\r\n            })\r\n\r\n        } else if (e.target.type === \"date\") {\r\n            const date = e.target.value;\r\n            this.setState({\r\n                date\r\n            })\r\n        } else {\r\n            const value = e.target.value;\r\n            this.setState({\r\n                value\r\n            })\r\n        }\r\n    }\r\n    handleClick = () => {\r\n        if (this.state.value.length < 3) {\r\n            return alert('Minimum trzy znaki')\r\n        } else {\r\n            const newTask = {\r\n                text: this.state.value,\r\n                date: this.state.date,\r\n                important: this.state.important,\r\n                active: true,\r\n                finish: null\r\n            }\r\n            const add = this.props.add(newTask);\r\n            if (add) {\r\n                this.setState({\r\n                    value: '',\r\n                    date: this.minDate,\r\n                    important: false\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    // }\r\n    render() {\r\n        return (\r\n            <div className=\"addTask\">\r\n                <h2>Dodaj zadanie</h2>\r\n                <p><input type=\"text\" placeholder=\"Nazwa zadania\" value={this.state.value} onChange={this.handleInput} /> <label htmlFor=\"important\"> <input type=\"checkbox\" checked={this.state.important} id=\"important\" onChange={this.handleInput} /> Ważne</label></p>\r\n                <p><label htmlFor=\"date\">Wykonać do: <input id=\"date\" type=\"date\" value={this.state.date} min={this.minDate} max=\"2029-12-31\" onChange={this.handleInput} /></label></p>\r\n                <button onClick={this.handleClick}>Dodaj zadanie do listy</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTask;","import React, { Component } from 'react';\nimport './App.css';\nimport TaskList from './TaskList.js';\nimport AddTask from './AddTask.js'\n\nclass App extends Component {\n  state = {\n    tasks: [\n      {\n        text: \"umyć okna (przykładowe zadanie)\",\n        date: \"2020-04-10\",\n        active: true,\n        finish: null,\n        important: false,\n        id: 0,\n      }\n    ]\n  }\n  idCounter = 1;\n  handleChange = (id) => {\n    // console.log(\"zmieniam \" + id);\n    let tasks = [...this.state.tasks];\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finish = new Date().getTime();\n      }\n    });\n    this.setState({\n      tasks\n    })\n\n  }\n  handleDelete = (id) => {\n    // console.log(\"usuwam \" + id);\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter(task => task.id !== id);\n    this.setState({\n      tasks\n    })\n  }\n  addTask = (task) => {\n    const tasks = [...this.state.tasks];\n    task.id = this.idCounter;\n    this.idCounter++;\n    tasks.push(task);\n    this.setState({\n      tasks\n    })\n    return true\n  }\n  render() {\n    return (\n      <>\n        <h1>TODO APP</h1>\n        <hr />\n        <AddTask add={this.addTask} />\n        <TaskList tasks={this.state.tasks} change={this.handleChange} delete={this.handleDelete} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}